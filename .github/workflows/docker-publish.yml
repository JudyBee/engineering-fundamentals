name: CI/CD Pipeline (Build, Push, Deploy)

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
    tags:
      - 'v*.*' # Also trigger on tag pushes for the deploy job

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        run: echo "** TASK D.1 - Replace this step with your SonarCloud analysis command (using SonarSource/sonarcloud-github-action@v2.2.0) **"
        # Hints:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub Actions
          # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Needs to be created in your SonarCloud Account and stored in your github repository secrets
          # -Dsonar.projectKey=<your-project-key>
          # -Dsonar.organization=<your-private-sonarcloud-organization>
          # -Dsonar.sources=.

  test:
    needs: code-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: execute the unit test
        run: echo "** TASK A - Add the necessary steps such that the unit test is executed on every merge request or pull request on the main branch."


  publish-docker-image:
    needs: test
    # This job runs only on pushes to main. It will generate a tag and push it.
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Crucial for pushing the tag
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Azure Container Registry # TASK B.1
        run: |
          echo "** TASK B.1 - Log in to Azure Container Registry using admin credentials **"
          echo "${{ secrets.AZURE_CR_PASSWORD }}" | docker login judysregistry.azurecr.io --username ${{ secrets.AZURE_CR_USERNAME }} --password-stdin
          echo "Logged in to ACR: judysregistry.azurecr.io" # Added for clarity in logs

      - name: Generate and Push Git Tag for New Version # TASK B.2
        id: versioning # This ID allows you to access outputs from this step
        run: |
          echo "** TASK B.2 - Generate a new Git tag for the Docker image version. Start with version v0.1 resp. increment existing git tag by 0.1. **"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin --tags --prune-tags
          latest_tag=$(git tag -l "v*.*" | sort -V | tail -n 1)
          if [[ -z "$latest_tag" ]]; then
            latest_tag="v0.0"
          fi
          echo "Highest existing tag found: $latest_tag"
          major_version=$(echo "$latest_tag" | cut -d'v' -f2 | cut -d'.' -f1)
          minor_version=$(echo "$latest_tag" | cut -d'.' -f2)
          next_minor_version=$((10#$minor_version + 1))
          new_tag="v${major_version}.${next_minor_version}"
          
          if git ls-remote --tags origin "$new_tag" | grep -q "$new_tag"; then
            echo "Tag '$new_tag' already exists on remote. Skipping tag creation and push."
          else
            echo "Creating local tag '$new_tag'..."
            git tag "$new_tag"
            echo "Pushing tag '$new_tag' to remote..."
            git push origin "$new_tag"
            echo "Tag '$new_tag' successfully created and pushed."
          fi
          echo "full_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "Final tag used for this workflow run: $new_tag"


      - name: Build and Push Docker Image (with new tag and latest) # This combines build and push for clarity
        run: |
          IMAGE_TAG=${{ steps.versioning.outputs.full_tag }}
          REGISTRY_URL="judysregistry.azurecr.io"
          IMAGE_NAME="ipt-spins" # <-- IMPORTANT: Ensure this matches your webapp create name

          echo "Building Docker image: $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG"
          docker build . -t $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG -t $REGISTRY_URL/$IMAGE_NAME:latest .

          echo "Pushing Docker image: $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG to ACR"
          docker push $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG

          echo "Pushing Docker image: $REGISTRY_URL/$IMAGE_NAME:latest to ACR"
          docker push $REGISTRY_URL/$IMAGE_NAME:latest
          echo "Docker images pushed successfully!"


  deploy-to-azure: # NEW DEPLOYMENT JOB
    needs: publish-docker-image # This job depends on the previous one succeeding
    # This deployment job will run ONLY when a new tag is pushed (which is done by publish-docker-image)
    # and ensures the deployment uses the image tagged 'latest'
    if: success() && startsWith(github.ref, 'refs/tags/v') 
    runs-on: ubuntu-latest
    environment: production # Good practice for deployments
    permissions:
      id-token: write # Required for azure/login with OIDC (preferred)
      contents: read  # Required for checkout

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure with Service Principal
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_RESOURCEGROUP_CONTRIBUTOR_SERVICEPRINICIPAL }}

      - name: Deploy to Azure Web App
        id: deploy-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          images: 'judysregistry.azurecr.io/ipt-spins:latest' # Deploy the 'latest' tagged image

      - name: Verify Deployment URL (Optional)
        run: |
          echo "Deployment initiated. Verify your application at:"
          echo "https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "Please allow a few moments for the new image to become active."
