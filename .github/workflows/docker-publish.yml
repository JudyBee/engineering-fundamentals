name: Build and Push Docker Image

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        run: echo "** TASK D.1 - Replace this step with your SonarCloud analysis command (using SonarSource/sonarcloud-github-action@v2.2.0) **"
        # Hints:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub Actions
          # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Needs to be created in your SonarCloud Account and stored in your github repository secrets
          # -Dsonar.projectKey=<your-project-key>
          # -Dsonar.organization=<your-private-sonarcloud-organization>
          # -Dsonar.sources=.

  test:
    needs: code-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: execute the unit test
        run: echo "** TASK A - Add the necessary steps such that the unit test is executed on every merge request or pull request on the main branch."


  publish-docker-image:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Azure Container Registry
        run: | # <-- ADD ONE MORE SPACE HERE (should be 2 spaces from 'name:')
          echo "** TASK B.1 - Log in to Azure Container Registry using admin credentials **"
          # Log in to Azure Container Registry using the provided admin credentials
          # The --password-stdin flag is used for security, piping the password from the secret.
          echo "${{ secrets.AZURE_CR_PASSWORD }}" | docker login judysregistry.azurecr.io --username ${{ secrets.AZURE_CR_USERNAME }} --password-stdin
      - name: Generate and Push Git Tag for New Version
        id: versioning # This ID allows you to access outputs from this step
        run: |
          echo "** TASK B.2 - Generate a new Git tag for the Docker image version. Start with version v0.1 resp. increment existing git tag by 0.1. **"
          echo "Publish the git tag to the remote repository and store it as an output for subsequent steps. (hint: use GITHUB_OUTPUT)"

          # 1. Configure Git user for the commit/tag - essential for Git operations
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 2. Fetch all tags from the remote, ensuring local is up-to-date
          # --force is used to make sure local tags don't prevent fetching if they are out of sync
          echo "Fetching all remote tags..."
          git fetch --tags --force origin

          # 3. Get the latest existing tag matching the pattern vX.Y
          #    - git describe --tags: Lists tags.
          #    - --abbrev=0: Shows only the tag name, not the commit hash.
          #    - --match "v[0-9]*.[0-9]*": Only considers tags starting with 'v' followed by numbers.
          #    - 2>/dev/null: Suppresses error messages if no tags match.
          #    - || echo "v0.0": If no matching tag is found, defaults to "v0.0" to start the sequence.
          latest_tag=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*" 2>/dev/null || echo "v0.0")
          echo "Latest existing tag found: $latest_tag"

          # 4. Extract major and minor versions from the latest tag
          #    Uses 'sed' to parse the tag like "v1.2" into "1" and "2".
          major_version=$(echo "$latest_tag" | sed -E 's/^v([0-9]+)\.([0-9]+)$/\1/')
          minor_version=$(echo "$latest_tag" | sed -E 's/^v([0-9]+)\.([0-9]+)$/\2/')

          # 5. Calculate the next minor version
          #    $((...)) performs arithmetic. 10# ensures the number is treated as base-10
          #    to avoid issues with numbers that might look like octal (e.g., "08").
          next_minor_version=$((10#$minor_version + 1))

          # 6. Construct the new tag string
          new_tag="v${major_version}.${next_minor_version}"
          echo "Generated new tag: $new_tag"

          # 7. Create the new Git tag locally
          git tag "$new_tag"

          # 8. Push the new tag to the remote repository
          #    This requires the 'contents: write' permission on the job.
          echo "Pushing tag '$new_tag' to remote..."
          git push origin "$new_tag"

          # 9. Store the new tag as a step output.
          #    This makes the 'full_tag' variable available to subsequent steps
          #    using the syntax: ${{ steps.versioning.outputs.full_tag }}
          echo "full_tag=$new_tag" >> "$GITHUB_OUTPUT"

      - name: Build the Docker image
        run: |
          docker build -t judysregistry.azurecr.io/ipt-spins:${{ steps.versioning.outputs.full_tag }} -t judysregistry.azurecr.io/ipt-spins:latest .

      - name: Push the Docker image to ACR # TASK B.3
        run: |
          echo "** TASK B.3 - Push the docker images to the ACR **"

          # Get the generated tag from the previous step (Task B.2)
          IMAGE_TAG=${{ steps.versioning.outputs.full_tag }}
          
          # Define your ACR registry URL and image name
          REGISTRY_URL="judysregistry.azurecr.io" # Your ACR login server
          IMAGE_NAME="my-app" # <-- IMPORTANT: Replace with the actual name of your Docker image

          # Build the Docker image
          echo "Building Docker image: $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG"
          # The '.' assumes your Dockerfile is in the root of your repository
          docker build . -t $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG

          # Push the Docker image to ACR
          echo "Pushing Docker image: $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG to ACR"
          docker push $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG

          echo "Docker image $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG pushed successfully!"
